# Что такое Git?
## 1.Git
* Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.

## 2. Git может быть локальным, централизованным или распределённым:

* Локальный установлен на одном компьютере и хранит файлы только в одном экземпляре в рамках настроенного окружения — подходит, если программист пишет код в одиночку.
* 	Централизованный находится на общем севере и хранит все файлы на нем.
* 	Распределённый хранит данные и в общем облачном хранилище, и в устройствах участников команды.
## 3. Принципы работы с Git
1. Регулярно коммитить ― сохранять изменения в Git.
2. Создавать новые ветки.
3. Чётко и лаконично описывать коммиты.
## 4. Зафиксировать файл

**git init** - инициализировать локальный репозиторий

**git add** - добавить файл и файлы к следующему коммиту

**git version** - Узнать версию гитаgit init** - Инициализация: указываем папку, в которой git начнёт отслеживать изменения

**git status** - текущее состояние гита, есть
ли изменения, которые нужно закоммитить
(сохранить)

**git add** - добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита. Эта команда дается после добавления
файлов.

**git commit** - зафиксировать или сохранить

**git log** - Журнал изменений

**git checkout** - Переключение между версиями.

**git checkout master** - возвращение в текущий коммит

**git diff** - Показывает разницу между текущим файлом и сохранёных

**git push** - используется для выгрузки содержимого локального репозитория в удаленный репозиторий. Она позволяет передать коммиты из локального репозитория в удаленный.

**git pull** - используется для извлечения и загрузки содержимого из удаленного репозитория и немедленного обновления локального репозитория этим содержимым. Слияние удаленных вышестоящих изменений в локальный репозиторий — это обычное дело в процессе совместной работы на основе Git. 

**git branch** - рассматривается общая модель ветвления в Git. Возможность ветвления доступна в большинстве современных систем контроля версий. Однако эта операция в ряде систем может быть довольно затратной как по времени, так и по объему дискового пространства.
